#!/usr/bin/env python3
import os
import sys
import glob
import csv
from ase.io import read
from ase.ga.data import DataConnection

# inputs
ion = 'Mg'
start_num = 1
end_num = 12
db_name = 'gadb.db'
output_csv = f"{ion}_ga_energy.csv"

# Reference energy for i ions: ref_full * i/n_full + ref_empty * (n_full-i)/n_full
ref_empty = -1869.25113670
ref_full = -1952.30429536
n_full = 12  # number of ions when structure is "full"


def main():
    # Store the original directory to return to later
    original_dir = os.getcwd()
    
    # Create/open CSV file for writing
    with open(output_csv, 'w', newline='') as csvfile:
        csv_writer = csv.writer(csvfile, dialect='excel')
        # Write header
        csv_writer.writerow([f"{ion}_count", "Raw Energy", "Ref Energy", "Form Energy"])
        
        # Loop through each ion count
        for i in range(start_num, end_num + 1):
            dir_path = f"{ion}-{i}"

            # reference energy
            ref_E = ref_full * i/n_full + ref_empty * (n_full-i)/n_full
            
            try:
                # Change to the target directory
                os.chdir(dir_path)
                print(f"Processing directory: {dir_path}")
                
                da = DataConnection(db_name)

                # Find all candidate files
                all_candidates = da.get_all_relaxed_candidates()
                
                if len(all_candidates) == 0:
                    print(f"No candidate files found in {dir_path}")
                    os.chdir(original_dir)
                    continue
                
                # Process each candidate file
                for candidate in all_candidates:
                    confid = candidate.info['confid']
                    try:
                        # Extract energy using ASE
                        energy = candidate.get_potential_energy()
                        
                        # Write to CSV
                        form_energy = energy - ref_E
                        csv_writer.writerow([i, energy, ref_E, form_energy])
                        print(f"  Candidate {confid}: Energy = {energy}")
                        
                    except Exception as e:
                        print(f"  Error processing candidiate {confid}: {e}")
                
                # Return to original directory
                os.chdir(original_dir)
                
            except FileNotFoundError:
                print(f"Directory not found: {dir_path}")
                continue
            except Exception as e:
                print(f"Error processing {dir_path}: {e}")
                # Make sure we return to the original directory even if there's an error
                if os.getcwd() != original_dir:
                    os.chdir(original_dir)
    
    print(f"Results written to {output_csv}")

if __name__ == "__main__":
    main()
